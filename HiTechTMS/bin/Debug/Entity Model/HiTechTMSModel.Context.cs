//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Entity_Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HitechTruckMngtSystmDataBaseFileEntities : DbContext
    {
        public HitechTruckMngtSystmDataBaseFileEntities()
            : base("name=HitechTruckMngtSystmDataBaseFileEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserRoleType> UserRoleTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<EmailMaster> EmailMasters { get; set; }
        public virtual DbSet<EmailConfig> EmailConfigs { get; set; }
        public virtual DbSet<mstSupplierTransporter> mstSupplierTransporter { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<mstStoredTareRecords> mstStoredTareRecords { get; set; }
        public virtual DbSet<transPublicWeight> transPublicWeight { get; set; }
        public virtual DbSet<mstFormName> mstFormName { get; set; }
        public virtual DbSet<mstPermission> mstPermission { get; set; }
        public virtual DbSet<MultiPrdWeight> MultiPrdWeight { get; set; }
        public virtual DbSet<transMultiWeight> transMultiWeight { get; set; }
        public virtual DbSet<ViewMultiProduct> ViewMultiProduct { get; set; }
        public virtual DbSet<viewMultiPendingFile> viewMultiPendingFile { get; set; }
        public virtual DbSet<mstGeneralSettings> mstGeneralSettings { get; set; }
        public virtual DbSet<V_mstGeneralSettings> V_mstGeneralSettings { get; set; }
        public virtual DbSet<V_T_MSTShifts> V_T_MSTShifts { get; set; }
        public virtual DbSet<mstShifts1> mstShifts1Set { get; set; }
        public virtual DbSet<V_T_mstShiftAllocationInfo> V_T_mstShiftAllocationInfo { get; set; }
        public virtual DbSet<mstShiftAllocationInfo> mstShiftAllocationInfo { get; set; }
        public virtual DbSet<mstHyperTerminalData> mstHyperTerminalData { get; set; }
        public virtual DbSet<mstWeighBridgeSetup> mstWeighBridgeSetup { get; set; }
        public virtual DbSet<rptNormalTicket> rptNormalTicket { get; set; }
        public virtual DbSet<V_NormalDashBoard> V_NormalDashBoard { get; set; }
        public virtual DbSet<V_PublicDashBoard> V_PublicDashBoard { get; set; }
        public virtual DbSet<viewNormalPendingFile> viewNormalPendingFile { get; set; }
        public virtual DbSet<Captions> Captions { get; set; }
        public virtual DbSet<V_Captions> V_Captions { get; set; }
        public virtual DbSet<V_NormalCompleteWeightDashBoard> V_NormalCompleteWeightDashBoard { get; set; }
        public virtual DbSet<V_NormalPendingWeightDashBoard> V_NormalPendingWeightDashBoard { get; set; }
        public virtual DbSet<V_rptNormalReport> V_rptNormalReport { get; set; }
        public virtual DbSet<transNormalWeight> transNormalWeight { get; set; }
    
        public virtual ObjectResult<Procedure_Result> Procedure(Nullable<int> param1, Nullable<int> param2)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(int));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure_Result>("Procedure", param1Parameter, param2Parameter);
        }
    }
}
